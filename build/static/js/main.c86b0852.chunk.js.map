{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","Math","random","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iMAAaA,EAAc,SAACC,EAAOC,GACjC,OAAOA,EAAOC,MACZ,IAAK,WACH,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CAChBG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,KAAKC,YAEb,IAAK,cACH,OAAOR,EAAMS,QAAO,SAAAL,GAAI,OAAIA,EAAKE,KAAOL,EAAOK,MACjD,QACE,OAAON,ICRAU,EAAcC,0BAkBZC,EAhBa,SAAAC,GAAU,IAAD,EACTC,qBAAWf,EAAa,IAAI,WACpD,IAAMgB,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHV,mBAC5BK,EAD4B,KACrBC,EADqB,KAQnC,OAHAC,qBAAU,WACRN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC5C,CAACA,IAGF,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAOC,aACjCR,EAAMc,WCHCC,EAVA,WAAO,IACZR,EAAUS,qBAAWnB,GAArBU,MACR,OACE,yBAAKU,UAAU,UACb,oDACA,iDAAwBV,EAAMW,OAA9B,+BCOSC,EAZK,SAAC,GAAc,IAAZ5B,EAAW,EAAXA,KAEbiB,EAAaQ,qBAAWnB,GAAxBW,SACR,OAEE,wBAAIY,QAAS,kBAAMZ,EAAS,CAACnB,KAAM,cAAeI,GAAIF,EAAKE,OACzD,yBAAKwB,UAAU,SAAU1B,EAAKD,OAC9B,yBAAK2B,UAAU,UAAW1B,EAAKC,UCStB6B,EAfE,WAAO,IACdd,EAAUS,qBAAWnB,GAArBU,MACR,OAAOA,EAAMW,OACX,yBAAKD,UAAU,aACb,4BACIV,EAAMe,KAAI,SAAA/B,GACV,OAAS,kBAAC,EAAD,CAAaA,KAAMA,EAAMgC,IAAKhC,EAAKE,UAKlD,yBAAKwB,UAAU,SAAf,uCCYWO,EAxBK,WAAO,IACjBhB,EAAaQ,qBAAWnB,GAAxBW,SADgB,EAEEiB,mBAAS,IAFX,mBAEjBnC,EAFiB,KAEVoC,EAFU,OAGID,mBAAS,IAHb,mBAGjBjC,EAHiB,KAGTmC,EAHS,KAaxB,OACE,0BAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEFtB,EAAS,CAACnB,KAAM,WAAYE,KAAM,CAChCD,QAAOE,YAETkC,EAAS,IACTC,EAAU,MAIR,2BAAOtC,KAAK,OAAO0C,YAAY,aAAalB,MAAOvB,EACjD0C,SAAU,SAAAH,GAAC,OAAIH,EAASG,EAAEI,OAAOpB,QAAQqB,UAAQ,IACnD,2BAAO7C,KAAK,OAAO0C,YAAY,cAAclB,MAAOrB,EAClDwC,SAAU,SAAAH,GAAC,OAAIF,EAAUE,EAAEI,OAAOpB,QAAQqB,UAAQ,IAClD,2BAAO7C,KAAK,SAASwB,MAAM,eCJpBsB,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c86b0852.chunk.js","sourcesContent":["export const bookReducer = (state, action) => {\n  switch(action.type) {\n    case 'ADD_BOOK':\n      return [...state, {\n        title: action.book.title,\n        author: action.book.author,\n        id: Math.random()\n      }];\n    case 'REMOVE_BOOK':\n      return state.filter(book => book.id !== action.id);\n    default:\n      return state\n  }\n}","import React, { createContext, useReducer, useEffect } from 'react';\nimport { bookReducer } from '../reducers/bookReducer';\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = props => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const localData = localStorage.getItem('books');\n    return localData ? JSON.parse(localData) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('books', JSON.stringify(books))\n  }, [books]);\n  return (\n    // <BookContext.Provider value={{books, addBook, removeBook}}>\n    <BookContext.Provider value={{books, dispatch}}>\n      { props.children }\n    </BookContext.Provider>\n  )\n}\n\nexport default BookContextProvider;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst Navbar = () => {\n  const { books } = useContext(BookContext);\n  return (\n    <div className=\"navbar\">\n      <h1>Ramon's Reading List</h1>\n      <p>Currently you have { books.length } books to get through ...</p>\n    </div>\n  );\n}\n\nexport default Navbar;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookDetails = ({ book }) => {\n  // const { removeBook } = useContext(BookContext);\n  const { dispatch } = useContext(BookContext);\n  return (\n    // <li onClick={() => removeBook(book.id)}>\n    <li onClick={() => dispatch({type: 'REMOVE_BOOK', id: book.id})}>\n      <div className=\"title\">{ book.title }</div>\n      <div className=\"author\">{ book.author }</div>\n    </li>\n  );\n}\n \nexport default BookDetails;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\nimport BookDetails from './BookDetails';\n\nconst BookList = () => {\n  const { books } = useContext(BookContext);\n  return books.length ? (\n    <div className=\"book-list\">\n      <ul>\n        { books.map(book => {\n          return ( <BookDetails book={book} key={book.id} /> )\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\">No books to read. Hello free time.</div>\n  );\n}\n\nexport default BookList;","import React, { useContext, useState } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst NewBookForm = () => {\n  const { dispatch } = useContext(BookContext);\n  const [title, setTitle] = useState('');\n  const [author, setAuthor] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    // addBook(title, author);\n    dispatch({type: 'ADD_BOOK', book: {\n      title, author\n    }});\n    setTitle('');\n    setAuthor('');\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" placeholder=\"book title\" value={title}\n        onChange={e => setTitle(e.target.value)} required />\n      <input type=\"text\" placeholder=\"book author\" value={author}\n        onChange={e => setAuthor(e.target.value)} required />\n        <input type=\"submit\" value=\"add book\" />\n    </form>\n  );\n}\n \nexport default NewBookForm;","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/BookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}